// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6355.RobotsOverParma;

import org.usfirst.frc6355.RobotsOverParma.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc6355.RobotsOverParma.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickButtonLowGear;
    public JoystickButton joystickButtonHighGear;
    public JoystickButton joystickButtonLiftUp;
    public JoystickButton joystickButtonLiftDown;
    public JoystickButton joystickButtonBoxCollectorOn;
    public JoystickButton joystickButtonBoxCollectorOff;
    public JoystickButton joystickButtonBoxCollectorReverse;
    public Joystick joystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick = new Joystick(0);
        
        joystickButtonBoxCollectorReverse = new JoystickButton(joystick, 1);
        joystickButtonBoxCollectorReverse.whenPressed(new CommandBoxCollectorReverseDirection());
        joystickButtonBoxCollectorOff = new JoystickButton(joystick, 1);
        joystickButtonBoxCollectorOff.whenPressed(new CommandBoxCollectorOff());
        joystickButtonBoxCollectorOn = new JoystickButton(joystick, 1);
        joystickButtonBoxCollectorOn.whenPressed(new CommandBoxCollectorOn());
        joystickButtonLiftDown = new JoystickButton(joystick, 1);
        joystickButtonLiftDown.whenPressed(new CommandLiftDown());
        joystickButtonLiftUp = new JoystickButton(joystick, 1);
        joystickButtonLiftUp.whenPressed(new CommandLiftUp());
        joystickButtonHighGear = new JoystickButton(joystick, 2);
        joystickButtonHighGear.whenPressed(new CommandHighGear());
        joystickButtonLowGear = new JoystickButton(joystick, 1);
        joystickButtonLowGear.whenPressed(new CommandLowGear());


        // SmartDashboard Buttons
        SmartDashboard.putData("DriveWithJoystick", new DriveWithJoystick());
        SmartDashboard.putData("CommandHighGear", new CommandHighGear());
        SmartDashboard.putData("CommandLowGear", new CommandLowGear());
        SmartDashboard.putData("CommandAutonomousDrivePastLine", new CommandAutonomousDrivePastLine());
        SmartDashboard.putData("CommandLiftUp", new CommandLiftUp());
        SmartDashboard.putData("CommandLiftDown", new CommandLiftDown());
        SmartDashboard.putData("CommandBoxCollectorOn", new CommandBoxCollectorOn());
        SmartDashboard.putData("CommandBoxCollectorOff", new CommandBoxCollectorOff());
        SmartDashboard.putData("CommandBoxCollectorReverseDirection", new CommandBoxCollectorReverseDirection());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

