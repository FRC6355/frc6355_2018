// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6355.RobotsOverParma;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainSpeedControllerLeftA;
    public static SpeedController driveTrainSpeedControllerLeftB;
    public static SpeedController driveTrainSpeedControllerLeftC;
    public static SpeedControllerGroup driveTrainSpeedControllerGroupLeft;
    public static SpeedController driveTrainSpeedControllerRightA;
    public static SpeedController driveTrainSpeedControllerRightB;
    public static SpeedController driveTrainSpeedControllerRightC;
    public static SpeedControllerGroup driveTrainSpeedControllerGroupRight;
    public static DifferentialDrive driveTrainDifferentialDrive;
    public static Compressor driveTrainCompressor;
    public static Solenoid driveTrainSolenoidShifter;
    public static AnalogGyro driveTrainAnalogGyroNavX;
    public static Encoder driveTrainQuadratureEncoderLeft;
    public static Encoder driveTrainQuadratureEncoderRight;
    public static DigitalInput hookLiftLimitSwitchOpen;
    public static DigitalInput hookLiftLimitSwitchClosed;
    public static SpeedController hookLiftSpeedControllerHookLift;
    public static SpeedController boxCollectorSpeedControllerBoxCollector;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainSpeedControllerLeftA = new PWMVictorSPX(1);
        LiveWindow.addActuator("DriveTrain", "SpeedControllerLeftA", (PWMVictorSPX) driveTrainSpeedControllerLeftA);
        driveTrainSpeedControllerLeftA.setInverted(false);
        driveTrainSpeedControllerLeftB = new PWMVictorSPX(2);
        LiveWindow.addActuator("DriveTrain", "SpeedControllerLeftB", (PWMVictorSPX) driveTrainSpeedControllerLeftB);
        driveTrainSpeedControllerLeftB.setInverted(false);
        driveTrainSpeedControllerLeftC = new PWMVictorSPX(3);
        LiveWindow.addActuator("DriveTrain", "SpeedControllerLeftC", (PWMVictorSPX) driveTrainSpeedControllerLeftC);
        driveTrainSpeedControllerLeftC.setInverted(false);
        driveTrainSpeedControllerGroupLeft = new SpeedControllerGroup(driveTrainSpeedControllerLeftA, driveTrainSpeedControllerLeftB , driveTrainSpeedControllerLeftC );
        LiveWindow.addActuator("DriveTrain", "SpeedControllerGroupLeft", driveTrainSpeedControllerGroupLeft);
        
        driveTrainSpeedControllerRightA = new PWMVictorSPX(4);
        LiveWindow.addActuator("DriveTrain", "SpeedControllerRightA", (PWMVictorSPX) driveTrainSpeedControllerRightA);
        driveTrainSpeedControllerRightA.setInverted(false);
        driveTrainSpeedControllerRightB = new PWMVictorSPX(5);
        LiveWindow.addActuator("DriveTrain", "SpeedControllerRightB", (PWMVictorSPX) driveTrainSpeedControllerRightB);
        driveTrainSpeedControllerRightB.setInverted(false);
        driveTrainSpeedControllerRightC = new PWMVictorSPX(6);
        LiveWindow.addActuator("DriveTrain", "SpeedControllerRightC", (PWMVictorSPX) driveTrainSpeedControllerRightC);
        driveTrainSpeedControllerRightC.setInverted(false);
        driveTrainSpeedControllerGroupRight = new SpeedControllerGroup(driveTrainSpeedControllerRightA, driveTrainSpeedControllerRightB , driveTrainSpeedControllerRightC );
        LiveWindow.addActuator("DriveTrain", "SpeedControllerGroupRight", driveTrainSpeedControllerGroupRight);
        
        driveTrainDifferentialDrive = new DifferentialDrive(driveTrainSpeedControllerGroupLeft, driveTrainSpeedControllerGroupRight);
        LiveWindow.addActuator("DriveTrain", "DifferentialDrive", driveTrainDifferentialDrive);
        driveTrainDifferentialDrive.setSafetyEnabled(true);
        driveTrainDifferentialDrive.setExpiration(0.1);
        driveTrainDifferentialDrive.setMaxOutput(1.0);

        driveTrainCompressor = new Compressor(0);
        LiveWindow.addActuator("DriveTrain", "Compressor", driveTrainCompressor);
        
        driveTrainSolenoidShifter = new Solenoid(0, 0);
        LiveWindow.addActuator("DriveTrain", "SolenoidShifter", driveTrainSolenoidShifter);
        
        driveTrainAnalogGyroNavX = new AnalogGyro(0);
        LiveWindow.addSensor("DriveTrain", "AnalogGyroNavX", driveTrainAnalogGyroNavX);
        driveTrainAnalogGyroNavX.setSensitivity(0.007);
        driveTrainQuadratureEncoderLeft = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "QuadratureEncoderLeft", driveTrainQuadratureEncoderLeft);
        driveTrainQuadratureEncoderLeft.setDistancePerPulse(1.0);
        driveTrainQuadratureEncoderLeft.setPIDSourceType(PIDSourceType.kRate);
        driveTrainQuadratureEncoderRight = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "QuadratureEncoderRight", driveTrainQuadratureEncoderRight);
        driveTrainQuadratureEncoderRight.setDistancePerPulse(1.0);
        driveTrainQuadratureEncoderRight.setPIDSourceType(PIDSourceType.kRate);
        hookLiftLimitSwitchOpen = new DigitalInput(6);
        LiveWindow.addSensor("HookLift", "LimitSwitchOpen", hookLiftLimitSwitchOpen);
        
        hookLiftLimitSwitchClosed = new DigitalInput(7);
        LiveWindow.addSensor("HookLift", "LimitSwitchClosed", hookLiftLimitSwitchClosed);
        
        hookLiftSpeedControllerHookLift = new PWMVictorSPX(7);
        LiveWindow.addActuator("HookLift", "SpeedControllerHookLift", (PWMVictorSPX) hookLiftSpeedControllerHookLift);
        hookLiftSpeedControllerHookLift.setInverted(false);
        boxCollectorSpeedControllerBoxCollector = new PWMVictorSPX(8);
        LiveWindow.addActuator("BoxCollector", "SpeedControllerBoxCollector", (PWMVictorSPX) boxCollectorSpeedControllerBoxCollector);
        boxCollectorSpeedControllerBoxCollector.setInverted(false);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
